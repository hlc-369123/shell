install
text
cdrom
keyboard us
lang en_US.UTF-8
rootpw --iscrypted $6$PMueeJV2ZLESQiM2$Dfzak53vD/dfL3LWjylm7mOp2SJuppypLGho8HuMlnXPvjPYiJ4zlHF4z578I2BrKVez1PsyA2eCG.tGx7YgS0
auth --useshadow --passalgo=sha512
firewall --disabled
selinux --disabled
skipx
reboot
timezone Asia/Shanghai
zerombr

%include /tmp/part-include
%include /tmp/bootloader-include

%pre --log=/opt/sds/iso/install.log
#!/bin/sh

plog() { echo '['$(date -u +"%Y-%m-%dT%H:%M:%SZ")']' $@; }

check_parted() {
	local check_drive="$1"
	if parted -s /dev/$check_drive print &>/dev/null ; then
		echo
		echo "$check_drive drive contains partition table:"
		parted -s /dev/$check_drive print
		echo
		read -p "Are you sure you want to erase ALL data on disk $check_drive? (y/N)" confirm_format
		if [[ "$confirm_format" == "y" ]] || [[ "$confirm_format" == "Y" ]] || [[ "$forceformat" == "yes" ]]; then
			return 0
		else
			return 1
		fi
	else
		return 0
	fi
}

target=""
targets=""
target_count=0
drives=""
drv_dir="/sys/block"

tmp="/tmp/drives"
tmp_targets="/tmp/target_drives"
echo "Drive|Size|Model|Vendor" > $tmp
echo "Drive|Size|Model|Vendor" > $tmp_targets

for drv in `ls -1 $drv_dir | grep "sd\|hd\|vd"`; do
	rmable=`cat ${drv_dir}/${drv}/removable`
	if [[ $rmable == 0 ]]; then
		if [[ -z $drives ]]; then
			drives=$drv
		else
			drives="${drives} ${drv}"
		fi
		size=$((`cat ${drv_dir}/${drv}/size`/2**21))
		model=`cat ${drv_dir}/${drv}/device/model`
		vendor=`cat ${drv_dir}/${drv}/device/vendor`
		echo "${drv}|${size}|${model}|${vendor}" >> $tmp
		min=$(( 222 * 9 / 10 ))
		max=$(( 222 * 11 / 10 ))
		if [[ $size -le $max ]] && [[ $size -gt $min ]]; then
			target=$drv
			let target_count++
			if [[ -z $targets ]]; then
				targets=$drv
			else
				targets="${targets} ${drv}"
			fi
			plog "Found available target dirve $drv."
			echo "${drv}|${size}|${model}|${vendor}" >> $tmp_targets
		fi
	fi
done

if [[ -z $drives ]]; then
	rm -f $tmp
	rm -f $tmp_targets
	clear
	echo
	echo '******************************************************************'
	echo '*                           E R R O R                            *'
	echo '*                                                                *'
	echo '*           Not found possible drive for installation.           *'
	echo '*            Please check the storage and try again.             *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	read -p "Press Enter to restart: " _
	reboot
fi

if [[ $target_count -gt 1 ]]; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	clear
	echo
	echo '******************************************************************'
	echo '*                         W A R N I N G                          *'
	echo '*                                                                *'
	echo '*           Found multiple installation target drives.           *'
	echo '*          Please select one from the following drives.          *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	echo "Available drives: "
	echo
	awk -F '|' '{ printf "%-7s %-7s %-12s %-s\n", $1, $2, $3, $4} ' $tmp_targets
	echo
	match="no"
	while [[ $match == "no" ]]; do
		read -p "Choose drive from ($targets): " target
		for drv in ${targets[@]}; do
			if [[ $drv == $target ]]; then
				match="yes"
				break
			fi
		done
	done
	chvt 1
fi

if [[ -z $target ]] ; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	clear
	echo
	echo '******************************************************************'
	echo '*                         W A R N I N G                          *'
	echo '*                                                                *'
	echo '*            No default installation target drive.               *'
	echo '*     Please select one from the following Possible drives.      *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	echo "All possible drives: "
	echo
	awk -F '|' '{ printf "%-7s %-7s %-12s %-s\n", $1, $2, $3, $4} ' $tmp
	echo
	match="no"
	while [[ $match == "no" ]]; do
		read -p "Choose drive from ($drives): " target
		for drv in ${drives[@]}; do
			if [[ $drv == $target ]]; then
				match="yes"
				break
			fi
		done
	done
	chvt 1
fi

if [[ "check" == "uncheck" ]]; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	if ! check_parted $target ; then
		clear
		echo
		echo '******************************************************************'
		echo '*                           E R R O R                            *'
		echo '*                                                                *'
		echo '*           Target disk contains active partition(s).            *'
		echo '*       Installation can not continue without confirmation.      *'
		echo '*                                                                *'
		echo '******************************************************************'
		echo
		read -p "Press Enter to restart: " _
		reboot
	fi
	chvt 1
fi

rm -f $tmp
rm -f $tmp_targets


echo > /tmp/part-include
echo "clearpart --drives=${target} --all --initlabel" >> /tmp/part-include
echo "part /boot --fstype=xfs --ondisk=${target} --size=1024" >> /tmp/part-include
echo "part / --fstype=xfs --ondisk=${target} --size=1 --grow" >> /tmp/part-include

# bootloader --location=mbr --driveorder=sdX
echo "bootloader --append=' crashkernel=auto' --location=mbr --boot-drive=${target}" > /tmp/bootloader-include

plog "End of prepare script."
%end

%packages
@^infrastructure-server-environment
@base
@compat-libraries
@core
@development
kexec-tools
libicu
libxslt
mtr
%end

%post --log=/opt/sds/iso/install.log
#!/bin/sh

plog() { echo '['$(date -u +"%Y-%m-%dT%H:%M:%SZ")']' $@; }

# get variable from %pre section
hostname_file=/etc/hostname
installer_dir=/opt/xscaler/installer
iso_version_dir=/opt/xscaler
iso_version_file=/etc/iso-version
product_model_file=/etc/xs-product-model
mnt_dir="/tmp_dev"
network_config_dir=/etc/sysconfig/network-scripts

plog "Beginning of post script."
plog "Setting root disk write cache"
chmod +x /etc/rc.d/rc.local
cat << EOF >> /etc/rc.d/rc.local
root_disk=\$(mount | awk '\$3 == "/" {print \$1}' | tr -d '[0-9]')
hdparm -W 0 \$root_disk
EOF

plog "Setting sysctl config"
cat << EOF >> /etc/sysctl.conf
kernel.panic = 20
EOF

plog "Setting network configs"
nic_1gb_array=()
for nic in $(find /sys/class/net/ -type l -exec basename {} \;) ; do
    speed=$(ethtool ${nic} | \
        sed -n '/Supported link modes/,/Supported pause frame use/p' | \
        grep 'baseT/Full' | sed -r 's/.*[^0-9]([0-9]+)baseT.*/\1/' | \
        sort -nr | head -1)
    if [[ ${speed} -eq "1000" ]]; then
        nic_1gb_array+=("${nic}")
    fi
done
IFS=$'\n' nic_1gb_array=($(sort -n <<<"${nic_1gb_array[*]}"))
unset IFS

if [[ ${#nic_1gb_array[@]} -gt 2 ]]; then
    nic1_10gb="ens1f0"
    nic2_10gb="ens1f1"
    admin_nic="bond0"
else
    nic1_10gb="enp24s0f0"
    nic2_10gb="enp24s0f1"
    admin_nic="${nic_1gb_array[0]}"
fi

plog "1GB NICs: ${nic_1gb_array[@]}"
plog "10GB NICs: ${nic1_10gb} ${nic2_10gb}"

if [[ ${#nic_1gb_array[@]} -gt 2 ]]; then
    plog "Setting network configs for 4 1GB NICs server"

    # bond0
    cat << EOF > $network_config_dir/ifcfg-bond0
NAME="bond0"
DEVICE=bond0
TYPE="Bond"
BOOTPROTO="static"
BONDING_MASTER="yes"
BONDING_OPTS="mode=active-backup miimon=100 all_slaves_active=1"
ONBOOT="yes"
PEERDNS="no"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

    # bond0 slave0
    nic0_1gb=${nic_1gb_array[0]}
    cat << EOF > $network_config_dir/ifcfg-${nic0_1gb}
NAME="${nic0_1gb}"
DEVICE="${nic0_1gb}"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond0"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

    # bond0 slave1
    nic1_1gb=${nic_1gb_array[1]}
    cat << EOF > $network_config_dir/ifcfg-${nic1_1gb}
NAME="${nic1_1gb}"
DEVICE="${nic1_1gb}"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond0"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

    # internal nic
    nic2_1gb=${nic_1gb_array[2]}
    cat << EOF > $network_config_dir/ifcfg-${nic2_1gb}
NAME="${nic2_1gb}"
DEVICE="${nic2_1gb}"
BOOTPROTO="static"
IPADDR="192.168.254.1"
PREFIX="24"
ONBOOT="yes"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

else
    plog "Setting network configs for 2 1GB NICs server"

    # admin nic
    nic0_1gb=${nic_1gb_array[0]}
cat << EOF > $network_config_dir/ifcfg-${nic0_1gb}
NAME="${nic0_1gb}"
DEVICE="${nic0_1gb}"
BOOTPROTO="static"
ONBOOT="yes"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

    # internal nic
    nic1_1gb=${nic_1gb_array[1]}
    cat << EOF > $network_config_dir/ifcfg-${nic1_1gb}
NAME="${nic1_1gb}"
DEVICE="${nic1_1gb}"
BOOTPROTO="static"
IPADDR="192.168.254.1"
PREFIX="24"
ONBOOT="yes"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

fi

# bond1
cat << EOF > $network_config_dir/ifcfg-bond1
NAME="bond1"
DEVICE="bond1"
TYPE="Bond"
BOOTPROTO="static"
BONDING_MASTER="yes"
BONDING_OPTS="mode=active-backup miimon=100 all_slaves_active=1"
ONBOOT="yes"
PEERDNS="no"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

# bond1 slave0
cat << EOF > $network_config_dir/ifcfg-${nic1_10gb}
NAME="${nic1_10gb}"
DEVICE="${nic1_10gb}"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond1"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

# bond1 slave1
cat << EOF > $network_config_dir/ifcfg-${nic2_10gb}
NAME="${nic2_10gb}"
DEVICE="${nic2_10gb}"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond1"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

plog "Disable network manager"
systemctl stop NetworkManager
systemctl disable NetworkManager
systemctl enable network

plog "Config grub menuentry"
sed -i "s/CentOS Linux/XSKY SDS OS/g" /boot/grub2/grub.cfg
sed -i "s/7 (Core)/4.2/g" /boot/grub2/grub.cfg

plog "Config grub cmdline"
sed -i "s/quiet/quiet intel_iommu=on iommu=pt/g" /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg

plog "Set /etc/ssh/sshd_config UseDNS to 'no'"
sed -i "s/#UseDNS yes/UseDNS no/g" /etc/ssh/sshd_config

plog "Set SR-IOV for ${nic1_10gb} and ${nic2_10gb}"
nics=(${nic1_10gb} ${nic2_10gb})
for nic in ${nics[*]}; do
    link_name=$(readlink /sys/class/net/${nic}/device)
    pci=$(echo ${link_name} | awk -F '/' '{print $NF}')
cat << EOF > /etc/udev/rules.d/99-${nic}.rules
ACTION=="add", SUBSYSTEM=="net", KERNELS=="${pci}", ATTR{device/sriov_numvfs}="2"
EOF
cat << EOF >> /etc/rc.d/rc.local
ip link set $nic vf 0 trust on
ip link set $nic vf 1 trust on
EOF
done

mkdir -p $installer_dir
mkdir -p $iso_version_dir
mkdir -p $mnt_dir

if `test -e /dev/disk/by-label/XSCALER` ; then
	device=/dev/disk/by-label/XSCALER
	plog "Get device by disk label XSCALER."
	plog "Command: mount -o loop $device $mnt_dir"
	mount -o loop $device $mnt_dir
else
	plog "Not get device by label, will use cdrom."
	plog "Command: ln -s /dev/scd0 /dev/cdrom"
	ln -s /dev/scd0 /dev/cdrom
	plog "Command: mount -o loop /dev/cdrom $mnt_dir"
	mount -o loop /dev/cdrom $mnt_dir
fi

plog "Copy installer to $installer_dir."
cp -f $mnt_dir/software/sds-oem-xe-2000-installer-* $installer_dir
cp -f $mnt_dir/software/sha256sum.txt $installer_dir

plog "Set hostname xscaler."
echo "xscaler" > $hostname_file

plog "Config ISO version."
echo "XS_4.2.200.0.200623" > $iso_version_file
echo "XE3160" > $product_model_file

# plog "Config OS release info"
# cp -f $mnt_dir/software/os-release /etc/os-release
# echo "XSKY SDS OS release 4.2" > /etc/centos-release

plog "Install extra RPMs"
rpm --quiet -i $mnt_dir/software/*.rpm

plog "Setup boa"
sed -i "s/^RootPassword.*$/RootPassword = Password@_/g" /etc/boa.conf
sed -i "s/^AdminNIC.*$/AdminNIC = $admin_nic/g" /etc/boa.conf
cat >> /etc/boa.conf << EOF

[spec]
MemorySize = 96G
CPUCores = 24
SSDNum = 2
HDDNum = 10
NIC1GPorts = 2
EOF
systemctl enable boa

umount $mnt_dir
rm -rf $mnt_dir

plog "End of post script."
%end
