[global]
thread=1
ioengine=libaio
time_based
runtime=600
direct=1
norandommap=1
randrepeat=0
iodepth=4
rw=readwrite
bs=256k
group_reporting

[xsky]
directory=/mnt/xsky
size=8G
numjobs=5


fio --filename=/dev/sdl --direct=1 --rw=randwrite --numjobs=4 --iodepth=4 \
--ioengine=libaio --bs=256k --group_reporting --name=lc_test --log_avg_msec=500 \
--write_bw_log=test-fio --write_lat_log=test-fio --write_iops_log=test-fio --size=1G --runtime=300 --time_based

---------------------------------------------------------------------------------------------------
[global]
thread=1
ioengine=libaio
time_based
runtime=600
direct=1
norandommap=1
randrepeat=0
iodepth=4
rw=readwrite
bs=256k
group_reporting
filename=/dev/sdl

[xsky]
filename=/dev/sdl
size=8G
numjobs=5
name=lc_test1
log_avg_msec=500
write_bw_log=test-fio
write_lat_log=test-fio
write_iops_log=test-fio
--------------------------------------------------------------------------------------


  ㈠ 概念
           
           ① 物理CPU 
              
              实际Server中插槽上的CPU个数
              物理cpu数量，可以数不重复的 physical id 有几个
           
           ② 逻辑CPU 
              
              Linux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的
              信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了
              一般情况，我们认为一颗cpu可以有多核，加上intel的超线程技术(HT), 可以在逻辑上再分一倍数量的cpu core出来
              逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)
              备注一下：Linux下top查看的CPU也是逻辑CPU个数
              
           ③ CPU核数
           
              一块CPU上面能处理数据的芯片组的数量、比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU
              
           一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术 
           
       ㈡ 查看CPU信息
          
          当我们 cat /proc/cpuinfo 时、
          具有相同core id的CPU是同一个core的超线程
          具有相同physical id的CPU是同一个CPU封装的线程或核心
              
        
       ㈢ 下面举例说明
     
        ① 查看物理CPU的个数

#cat /proc/cpuinfo |grep "physical id"|sort |uniq|wc -l
2

        ② 查看逻辑CPU的个数
#cat /proc/cpuinfo |grep "processor"|wc -l
24

        ③ 查看CPU是几核
#cat /proc/cpuinfo |grep "cores"|uniq
6 

       我这里应该是2个Cpu,每个Cpu有6个core,应该是Intel的U,支持超线程,所以显示24 
       

------------------------------------------------------------------------------
IO类型：

       readwrite=str, rw=str
              Type of I/O pattern. Accepted values are:

                     read   Sequential reads.

                     write  Sequential writes.

                     trim   Sequential trims (Linux block devices only).

                     randread
                            Random reads.

                     randwrite
                            Random writes.

                     randtrim
                            Random trims (Linux block devices only).

                     rw,readwrite
                            Sequential mixed reads and writes.

                     randrw Random mixed reads and writes.

                     trimwrite
                            Sequential trim+write sequences. Blocks will be trimmed first, then the same blocks will be written to.

              Fio defaults to read if the option is not specified. For the mixed I/O types, the default is to split them 50/50. For  certain
              types of I/O the result may still be skewed a bit, since the speed may be different.

              It  is  possible to specify the number of I/Os to do before getting a new offset by appending `:<nr>' to the end of the string
              given. For a random read, it would look like `rw=randread:8' for passing in an offset modifier with a value of 8. If the  suf
              fix  is used with a sequential I/O pattern, then the `<nr>' value specified will be added to the generated offset for each I/O
              turning sequential I/O into sequential I/O with holes.  For instance, using `rw=write:4k' will skip 4k for every  write.  Also
              see the rw_sequencer option.
